{"version":3,"sources":["json-webworker-pages/ws.worker.js"],"names":["host","ws","WebSocket","waitQueue","wsOpened","sendWaitingQueue","send","shift","length","onopen","postMessage","onmessage","message","data","JSON","parse","console","log","op","rtt","Date","getTime","Number","args","type","val","push","stringify"],"mappings":"AAAA,IAAIA,IAAI,GAAG,UAAyB,KAAzB,GAAiC,qBAAjC,GAAyD,qCAApE;AACA,IAAIC,EAAE,GAAG,IAAIC,SAAJ,WAAiBF,IAAjB,WAAT;AAEA,IAAMG,SAAS,GAAG,EAAlB;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,KAAG;AACDJ,IAAAA,EAAE,CAACK,IAAH,CAAQH,SAAS,CAACI,KAAV,EAAR;AACD,GAFD,QAESJ,SAAS,CAACK,MAAV,GAAmB,CAF5B;AAGD,CAJD;;AAMAP,EAAE,CAACQ,MAAH,GAAY,YAAM;AAChBL,EAAAA,QAAQ,GAAG,IAAX;AACAM,EAAAA,WAAW,CAAC,QAAD,CAAX,CAFgB,CAGhB;AACD,CAJD;AAMA;;;;;AAGAT,EAAE,CAACU,SAAH,GAAe,UAAUC,OAAV,EAAmB;AAChC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACC,IAAnB,CAAb;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,IAAvB;;AAEA,MAAIA,IAAI,CAACK,EAAL,KAAY,MAAhB,EAAwB;AACtB,QAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuBC,MAAM,CAACT,IAAI,CAACU,IAAL,CAAU,CAAV,CAAD,CAAzC;AACAP,IAAAA,OAAO,CAACC,GAAR,oBAAwBE,GAAxB;AACAT,IAAAA,WAAW,CAAC;AAAEc,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,GAAG,EAAEN;AAApB,KAAD,CAAX;AACA;AACD;;AAAA;AAEDT,EAAAA,WAAW,CAACG,IAAD,CAAX;AACD,CAZD;;AAcAF,SAAS,GAAG,yBAAc;AAAA,MAAXE,IAAW,QAAXA,IAAW;;AACxB,MAAI,CAACT,QAAL,EAAe;AACbD,IAAAA,SAAS,CAACuB,IAAV,CAAeb,IAAf;AACA;AACD;;AAEDZ,EAAAA,EAAE,CAACK,IAAH,CAAQQ,IAAI,CAACa,SAAL,CAAe;AAAET,IAAAA,EAAE,EAAE,MAAN;AAAcK,IAAAA,IAAI,EAAC,CAAC,IAAIH,IAAJ,GAAWC,OAAX,EAAD;AAAnB,GAAf,CAAR;AACApB,EAAAA,EAAE,CAACK,IAAH,CAAQQ,IAAI,CAACa,SAAL,CAAe;AAAET,IAAAA,EAAE,EAAE,OAAN;AAAeK,IAAAA,IAAI,EAAC,CAAC,IAAIH,IAAJ,GAAWC,OAAX,EAAD;AAApB,GAAf,CAAR;AACD,CARD","file":"ws.worker.39a1f5e9.js","sourceRoot":"../web","sourcesContent":["var host = process.env.NODE_ENV === 'dev' ? 'ws://localhost:3000' : 'wss://ws-js-pb-server.herokuapp.com';\nvar ws = new WebSocket(`${host}/json`);\n\nconst waitQueue = [];\nlet wsOpened = false;\n\nconst sendWaitingQueue = () => {\n  do {\n    ws.send(waitQueue.shift());\n  } while (waitQueue.length < 1);\n};\n\nws.onopen = () => {\n  wsOpened = true;\n  postMessage('opened');\n  // sendWaitingQueue();\n};\n\n/**\n * Use arrayBuffer\n */\nws.onmessage = function (message) {\n  const data = JSON.parse(message.data);\n  console.log('data = ', data);\n\n  if (data.op === 'pong') {\n    const rtt = new Date().getTime() - Number(data.args[0]);\n    console.log(`Pong --> ${rtt}ms`);\n    postMessage({ type: 'rtt', val: rtt });\n    return;\n  };\n\n  postMessage(data);\n};\n\nonmessage = ({ data }) => {\n  if (!wsOpened) {\n    waitQueue.push(data);\n    return;\n  }\n\n  ws.send(JSON.stringify({ op: 'ping', args:[new Date().getTime()] }));\n  ws.send(JSON.stringify({ op: 'topic', args:[new Date().getTime()] }));\n};\n"]}